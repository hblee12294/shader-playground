{"version":3,"sources":["assets/water.jpg","utils/threeUtils.ts","utils/transNavsToRoutes.ts","apps/Basic.ts","pages/Basic/Basic.tsx","apps/SpikySphere.ts","configs/navs.ts","pages/SpikySphere/SpikySphere.tsx","configs/routes.ts","commons/Layout/Layout.tsx","App.tsx","index.tsx"],"names":["module","exports","resizeRendererToDisplaySize","renderer","canvas","domElement","pixelRatio","window","devicePixelRatio","width","clientWidth","height","clientHeight","needResize","setSize","transNavsToRoutes","navs","reduce","prev","itemId","component","subNav","routeProps","title","concat","App","container","camera","scene","disposed","init","tick","dispose","aspect","updateProjectionMatrix","render","requestAnimationFrame","this","WebGLRenderer","append","PerspectiveCamera","position","z","Scene","background","Color","geometry","SphereBufferGeometry","material","ShaderMaterial","vertexShader","fragmentShader","sphere","Mesh","add","Basic","rootRef","useRef","useEffect","root","current","app","className","ref","displacement","noise","uniforms","time","Date","now","rotation","y","amplitude","value","Math","sin","color","offsetHSL","i","length","random","MathUtils","clamp","attributes","needsUpdate","Float32Array","count","setAttribute","BufferAttribute","colorTexture","TextureLoader","load","waterURL","wrapS","wrapT","RepeatWrapping","exact","routes","CustomStyledNavItem","withStyle","StyledNavItem","$theme","$level","paddingTop","sizing","scale300","paddingBottom","paddingRight","scale900","textTransform","typography","font350","font250","Layout","children","history","useHistory","location","useLocation","useState","activeItemId","setActiveItemId","pathname","items","onChange","event","item","preventDefault","push","overrides","NavItem","map","nav","key","path","to","engine","Styletron","ReactDOM","StrictMode","theme","DarkTheme","document","getElementById"],"mappings":"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","file":"static/js/main.45fa1004.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/water.bcfb9394.jpg\";","import { WebGLRenderer } from 'three'\n\nexport const resizeRendererToDisplaySize = (renderer: WebGLRenderer) => {\n  const canvas = renderer.domElement\n  const pixelRatio = window.devicePixelRatio\n  const width = (canvas.clientWidth * pixelRatio) | 0\n  const height = (canvas.clientHeight * pixelRatio) | 0\n\n  const needResize = canvas.width !== width || canvas.height !== height\n\n  if (needResize) {\n    renderer.setSize(width, height, false)\n  }\n\n  return needResize\n}\n","import { Navs, NavConfig, Routes, RouteConfig } from 'types'\n\nconst transNavsToRoutes = (navs: Navs) => {\n  const initialRoutes: (NavConfig | RouteConfig)[] = []\n\n  return navs.reduce((prev, { itemId, component, subNav, ...routeProps }) => {\n    if (component && itemId) {\n      delete routeProps.title\n\n      prev.concat({\n        component,\n        itemId,\n        ...routeProps,\n      })\n    }\n\n    if (subNav) {\n      prev = prev.concat(subNav)\n    }\n\n    return prev\n  }, initialRoutes) as Routes\n}\n\nexport default transNavsToRoutes\n","import { WebGLRenderer, PerspectiveCamera, Scene, Color, SphereBufferGeometry, ShaderMaterial, Mesh } from 'three'\nimport { resizeRendererToDisplaySize } from 'utils'\n\nconst vertex = `\n  varying vec3 vNormal;\n\n  void main() {\n    vNormal = normal;\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }\n`\n\nconst fragment = `\n  varying vec3 vNormal;\n\n  void main() {\n    vec3 light = vec3(0.5, 0.2, 0.1);\n\n    light = normalize(light);\n\n    float dProd = max(0.0, dot(vNormal, light));\n\n    gl_FragColor = vec4(dProd, dProd, dProd, 1.0);\n  }\n`\n\nclass App {\n  private container: HTMLDivElement\n  private renderer: WebGLRenderer\n  private camera: PerspectiveCamera\n  private scene: Scene\n  private disposed: boolean\n\n  constructor(container: HTMLDivElement) {\n    this.container = container\n\n    this.renderer = new WebGLRenderer()\n    this.container.append(this.renderer.domElement)\n\n    this.camera = new PerspectiveCamera(45, container.clientHeight / container.clientWidth, 0.1, 10000)\n    this.camera.position.z = 300\n\n    this.scene = new Scene()\n    this.scene.background = new Color(0x101010)\n\n    // Geometry\n    const geometry = new SphereBufferGeometry(50, 128, 64)\n\n    // Material\n    const material = new ShaderMaterial({\n      vertexShader: vertex,\n      fragmentShader: fragment,\n    })\n\n    const sphere = new Mesh(geometry, material)\n    this.scene.add(sphere)\n\n    this.disposed = false\n  }\n\n  init = () => {\n    this.tick()\n  }\n\n  dispose = () => {\n    this.disposed = true\n  }\n\n  tick = () => {\n    if (this.disposed || !this) return\n\n    if (resizeRendererToDisplaySize(this.renderer)) {\n      const canvas = this.renderer.domElement\n      this.camera.aspect = canvas.clientWidth / canvas.clientHeight\n      this.camera.updateProjectionMatrix()\n    }\n\n    this.renderer.render(this.scene, this.camera)\n\n    requestAnimationFrame(this.tick)\n  }\n}\n\nexport default App\n","import React, { useRef, useEffect } from 'react'\nimport './Basic.scss'\n\nimport App from 'apps/Basic'\n\nconst Basic: React.FC = () => {\n  const rootRef = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    const root = rootRef.current\n\n    if (!root) return\n\n    const app = new App(root)\n    app.init()\n\n    return () => {\n      app.dispose()\n    }\n  }, [])\n\n  return <div className=\"basic\" ref={rootRef}></div>\n}\n\nexport default Basic\n","import {\n  WebGLRenderer,\n  PerspectiveCamera,\n  Scene,\n  Mesh,\n  ShaderMaterial,\n  SphereBufferGeometry,\n  Color,\n  BufferAttribute,\n  MathUtils,\n  BufferGeometry,\n  TextureLoader,\n  Texture,\n  RepeatWrapping,\n} from 'three'\nimport { resizeRendererToDisplaySize } from 'utils'\n\nimport waterURL from 'assets/water.jpg'\n\nconst vertext = `\n  uniform float amplitude;\n\n  attribute float displacement;\n\n  varying vec3 vNormal;\n  varying vec2 vUv;\n\n  void main() {\n    vNormal = normal;\n    vUv= (0.5 + amplitude) * uv + vec2(amplitude);\n\n    vec3 newPosition = position + amplitude * normal * vec3(displacement);\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);\n  }\n`\n\nconst fragment = `\n  varying vec3 vNormal;\n  varying vec2 vUv;\n\n  uniform vec3 color;\n  uniform sampler2D colorTexture;\n\n  void main() {\n    vec3 light = vec3(0.5, 0.2, 0.1);\n\n    light = normalize(light);\n\n    float dProd = dot(vNormal, light) * 0.5 + 0.5;\n\n    vec4 tcolor = texture2D(colorTexture, vUv);\n    vec4 gray = vec4(vec3(tcolor.r * 0.3 + tcolor.g * 0.59 + tcolor.b * 0.11), 1.0);\n\n    gl_FragColor = gray * vec4(vec3(dProd) * vec3(color), 1.0);\n  }\n`\n\nclass App {\n  private container: HTMLDivElement\n  private renderer: WebGLRenderer\n  private camera: PerspectiveCamera\n  private scene: Scene\n  private disposed: boolean\n  private displacement: Float32Array\n  private noise: Float32Array\n  private sphere: Mesh\n  private uniforms: {\n    amplitude: { value: number }\n    color: { value: Color }\n    colorTexture: { value: Texture }\n  }\n\n  constructor(container: HTMLDivElement) {\n    this.container = container\n\n    this.renderer = new WebGLRenderer()\n    this.container.append(this.renderer.domElement)\n\n    this.camera = new PerspectiveCamera(45, container.clientHeight / container.clientWidth, 0.1, 10000)\n    this.camera.position.z = 300\n\n    this.scene = new Scene()\n    this.scene.background = new Color(0x101010)\n\n    // Geometry\n    const geometry = new SphereBufferGeometry(50, 128, 64)\n    const position = (geometry.attributes as any).position\n\n    this.displacement = new Float32Array(position.count)\n    this.noise = new Float32Array(position.count)\n\n    for (let i = 0; i < this.displacement.length; ++i) {\n      this.noise[i] = Math.random() * 5\n    }\n\n    geometry.setAttribute('displacement', new BufferAttribute(this.displacement, 1))\n\n    // Material\n    this.uniforms = {\n      amplitude: { value: 1.0 },\n      color: { value: new Color(0xff2200) },\n      colorTexture: { value: new TextureLoader().load(waterURL) },\n    }\n    this.uniforms.colorTexture.value.wrapS = this.uniforms.colorTexture.value.wrapT = RepeatWrapping\n\n    const material = new ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: vertext,\n      fragmentShader: fragment,\n    })\n\n    this.sphere = new Mesh(geometry, material)\n    this.scene.add(this.sphere)\n\n    this.disposed = false\n  }\n\n  init = () => {\n    this.tick()\n  }\n\n  dispose() {\n    this.disposed = true\n  }\n\n  tick = () => {\n    if (this.disposed || !this) return\n\n    if (resizeRendererToDisplaySize(this.renderer)) {\n      const canvas = this.renderer.domElement\n      this.camera.aspect = canvas.clientWidth / canvas.clientHeight\n      this.camera.updateProjectionMatrix()\n    }\n\n    const time = Date.now() * 0.01\n\n    this.sphere.rotation.y = this.sphere.rotation.z = 0.01 * time\n\n    this.uniforms.amplitude.value = 2.5 * Math.sin(this.sphere.rotation.y * 0.125)\n    this.uniforms.color.value.offsetHSL(0.0005, 0, 0)\n\n    for (let i = 0; i < this.displacement.length; ++i) {\n      this.displacement[i] = Math.sin(0.1 * i + time)\n\n      this.noise[i] += 0.5 * (0.5 - Math.random())\n      this.noise[i] = MathUtils.clamp(this.noise[i], -5, 5)\n\n      this.displacement[i] += this.noise[i]\n    }\n\n    ;((this.sphere.geometry as BufferGeometry).attributes.displacement as BufferAttribute).needsUpdate = true\n\n    this.renderer.render(this.scene, this.camera)\n\n    requestAnimationFrame(this.tick)\n  }\n}\n\nexport default App\n","import { Navs } from 'types'\nimport { Basic, SpikySphere } from 'pages'\n\nconst navs: Navs = [\n  {\n    title: 'Sphere',\n    subNav: [\n      {\n        title: 'Basic Sphere',\n        itemId: '/basic_sphere',\n        exact: true,\n        component: Basic,\n      },\n      {\n        title: 'Spiky Sphere',\n        itemId: '/spiky_sphere',\n        exact: true,\n        component: SpikySphere,\n      },\n    ],\n  },\n]\n\nexport default navs\n","import React, { useRef, useEffect } from 'react'\nimport './SpikySphere.scss'\n\nimport App from 'apps/SpikySphere'\n\nconst SpikySphere: React.FC = () => {\n  const rootRef = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    const root = rootRef.current\n\n    if (!root) return\n\n    const app = new App(root)\n    app.init()\n\n    return () => {\n      app.dispose()\n    }\n  }, [])\n\n  return <div className=\"spiky-sphere\" ref={rootRef}></div>\n}\n\nexport default SpikySphere\n","import navs from './navs'\nimport { transNavsToRoutes } from 'utils'\nimport { Routes } from 'types'\n\nconst routes: Routes = transNavsToRoutes(navs)\n\nexport default routes\n","import React, { useState, useEffect } from 'react'\nimport './Layout.scss'\nimport { withStyle } from 'baseui'\nimport { Navigation, StyledNavItem } from 'baseui/side-navigation'\nimport { useHistory, useLocation } from 'react-router-dom'\n\nimport { navs } from 'configs'\n\nconst CustomStyledNavItem = withStyle(StyledNavItem, ({ $theme, $level }: any) => ({\n  paddingTop: $theme.sizing.scale300,\n  paddingBottom: $theme.sizing.scale300,\n  paddingRight: $theme.sizing.scale900,\n  // ...(!$hasItemId || $level === 1\n  ...($level === 1\n    ? {\n        textTransform: 'uppercase',\n        ...$theme.typography.font350,\n      }\n    : {\n        ...$theme.typography.font250,\n      }),\n}))\n\nconst Layout: React.FC = ({ children }) => {\n  const history = useHistory()\n  const location = useLocation()\n\n  const [activeItemId, setActiveItemId] = useState('')\n\n  useEffect(() => {\n    setActiveItemId(location.pathname)\n  }, [location])\n\n  return (\n    <div className=\"layout\">\n      <div className=\"nav\">\n        <Navigation\n          items={navs}\n          activeItemId={activeItemId}\n          onChange={({ event, item }) => {\n            event.preventDefault()\n\n            if (location.pathname === item.itemId) return\n\n            history.push(item.itemId)\n            setActiveItemId(item.itemId)\n          }}\n          overrides={{\n            NavItem: CustomStyledNavItem,\n          }}\n        />\n      </div>\n      <main className=\"main\">{children}</main>\n    </div>\n  )\n}\n\nexport default Layout\n","import React from 'react'\nimport './App.scss'\nimport { HashRouter as Router, Switch, Route, Redirect } from 'react-router-dom'\n\nimport { Layout } from 'commons'\nimport { routes } from 'configs'\n\nconst App = () => {\n  return (\n    <Router>\n      <Layout>\n        <Switch>\n          {routes.map((nav) => (\n            <Route key={nav.itemId} path={nav.itemId} exact={nav.exact} component={nav.component} />\n          ))}\n          <Route exact path=\"/\">\n            <Redirect to={routes[0].itemId} />\n          </Route>\n        </Switch>\n      </Layout>\n    </Router>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\n\nimport { Client as Styletron } from 'styletron-engine-atomic'\nimport { Provider as StyletronProvider } from 'styletron-react'\nimport { DarkTheme, BaseProvider } from 'baseui'\n\nconst engine = new Styletron()\n\nReactDOM.render(\n  <React.StrictMode>\n    <StyletronProvider value={engine}>\n      <BaseProvider theme={DarkTheme}>\n        <App />\n      </BaseProvider>\n    </StyletronProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}